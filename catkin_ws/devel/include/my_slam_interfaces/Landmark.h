// Generated by gencpp from file my_slam_interfaces/Landmark.msg
// DO NOT EDIT!


#ifndef MY_SLAM_INTERFACES_MESSAGE_LANDMARK_H
#define MY_SLAM_INTERFACES_MESSAGE_LANDMARK_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace my_slam_interfaces
{
template <class ContainerAllocator>
struct Landmark_
{
  typedef Landmark_<ContainerAllocator> Type;

  Landmark_()
    : x(0.0)
    , y(0.0)
    , radius(0.0)
    , id(0)  {
    }
  Landmark_(const ContainerAllocator& _alloc)
    : x(0.0)
    , y(0.0)
    , radius(0.0)
    , id(0)  {
  (void)_alloc;
    }



   typedef float _x_type;
  _x_type x;

   typedef float _y_type;
  _y_type y;

   typedef float _radius_type;
  _radius_type radius;

   typedef int32_t _id_type;
  _id_type id;





  typedef boost::shared_ptr< ::my_slam_interfaces::Landmark_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::my_slam_interfaces::Landmark_<ContainerAllocator> const> ConstPtr;

}; // struct Landmark_

typedef ::my_slam_interfaces::Landmark_<std::allocator<void> > Landmark;

typedef boost::shared_ptr< ::my_slam_interfaces::Landmark > LandmarkPtr;
typedef boost::shared_ptr< ::my_slam_interfaces::Landmark const> LandmarkConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::my_slam_interfaces::Landmark_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::my_slam_interfaces::Landmark_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::my_slam_interfaces::Landmark_<ContainerAllocator1> & lhs, const ::my_slam_interfaces::Landmark_<ContainerAllocator2> & rhs)
{
  return lhs.x == rhs.x &&
    lhs.y == rhs.y &&
    lhs.radius == rhs.radius &&
    lhs.id == rhs.id;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::my_slam_interfaces::Landmark_<ContainerAllocator1> & lhs, const ::my_slam_interfaces::Landmark_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace my_slam_interfaces

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::my_slam_interfaces::Landmark_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::my_slam_interfaces::Landmark_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::my_slam_interfaces::Landmark_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::my_slam_interfaces::Landmark_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::my_slam_interfaces::Landmark_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::my_slam_interfaces::Landmark_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::my_slam_interfaces::Landmark_<ContainerAllocator> >
{
  static const char* value()
  {
    return "82af38ba43a2294416e5d394d28eaa70";
  }

  static const char* value(const ::my_slam_interfaces::Landmark_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x82af38ba43a22944ULL;
  static const uint64_t static_value2 = 0x16e5d394d28eaa70ULL;
};

template<class ContainerAllocator>
struct DataType< ::my_slam_interfaces::Landmark_<ContainerAllocator> >
{
  static const char* value()
  {
    return "my_slam_interfaces/Landmark";
  }

  static const char* value(const ::my_slam_interfaces::Landmark_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::my_slam_interfaces::Landmark_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 x\n"
"float32 y\n"
"float32 radius\n"
"int32 id\n"
;
  }

  static const char* value(const ::my_slam_interfaces::Landmark_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::my_slam_interfaces::Landmark_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.x);
      stream.next(m.y);
      stream.next(m.radius);
      stream.next(m.id);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Landmark_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::my_slam_interfaces::Landmark_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::my_slam_interfaces::Landmark_<ContainerAllocator>& v)
  {
    if (false || !indent.empty())
      s << std::endl;
    s << indent << "x: ";
    Printer<float>::stream(s, indent + "  ", v.x);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "y: ";
    Printer<float>::stream(s, indent + "  ", v.y);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "radius: ";
    Printer<float>::stream(s, indent + "  ", v.radius);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.id);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MY_SLAM_INTERFACES_MESSAGE_LANDMARK_H
